// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { StartScanStartScanPostError, StartScanStartScanPostResponse, StopScanStopScanPostError, StopScanStopScanPostResponse, ScanHostScanHostPostData, ScanHostScanHostPostError, ScanHostScanHostPostResponse, GetNodesNodesGetError, GetNodesNodesGetResponse, GetNodesDescriptionNetworkSummaryGetError, GetNodesDescriptionNetworkSummaryGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Start Scan
 */
export const startScanStartScanPost = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<StartScanStartScanPostResponse, StartScanStartScanPostError, ThrowOnError>({
        ...options,
        url: '/start_scan'
    });
};

/**
 * Stop Scan
 */
export const stopScanStopScanPost = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<StopScanStopScanPostResponse, StopScanStopScanPostError, ThrowOnError>({
        ...options,
        url: '/stop_scan'
    });
};

/**
 * Scan Host
 * Scan a host or subnet outside local network
 */
export const scanHostScanHostPost = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ScanHostScanHostPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ScanHostScanHostPostResponse, ScanHostScanHostPostError, ThrowOnError>({
        ...options,
        url: '/scan_host'
    });
};

/**
 * Get Nodes
 */
export const getNodesNodesGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesNodesGetResponse, GetNodesNodesGetError, ThrowOnError>({
        ...options,
        url: '/nodes'
    });
};

/**
 * Get Nodes Description
 */
export const getNodesDescriptionNetworkSummaryGet = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNodesDescriptionNetworkSummaryGetResponse, GetNodesDescriptionNetworkSummaryGetError, ThrowOnError>({
        ...options,
        url: '/network-summary'
    });
};